# ensure mpi is defined (needed for conda-smithy recipe-lint)
# prioritize nompi variant via build number
schema_version: 1

context:
  name: openpmd-api
  version: 0.16.1
  build: ${{build + 100 if mpi == 'nompi' else build}}
  sha256: a029a1779351949f41c1f36d0e75c698e59c5d284f080d5e4c2b8650779d2d58
  mpi: "mpi or 'nompi'"
  mpi_prefix: ${{""nompi" if mpi == 'nompi' else "mpi_" + mpi"}}

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://github.com/openPMD/openPMD-api/archive/${{ version }}.tar.gz
  sha256: ${{ sha256 }}
  file_name: ${{ version }}.tar.gz

build:
  # add build string so packages can depend on
  # mpi or nompi variants
  # dependencies:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  number: ${{ build }}
  string: ${{ mpi_prefix }}_py${{ py }}h${{ PKG_HASH }}_${{ build }}

requirements:
  build:
    - if: build_platform != target_platform
      then: python
    - if: build_platform != target_platform
      then: cross-python_${{ target_platform }}
    - if: build_platform != target_platform
      then: pybind11
    - ${{ compiler('c') }}
    - ${{ stdlib("c") }}
    - ${{ compiler('cxx') }}
    - if: unix
      then: make
    - cmake
    - curl
    - pkg-config
    # In OpenMPI, the compiler wrappers are binaries and the wrappers in build
    # can use host libraries by adding OPAL_PREFIX and in mpich, compiler
    # wrappers are bash scripts and wrappers in build can't use host libraries.
    - if: "mpi == \"openmpi\" and (build_platform != target_platform)"
      then: openmpi
  host:
    - if: "mpi != 'nompi'"
      then: ${{ mpi }}
    - python
    - pybind11
    - numpy  # for ctest tests
    # need to list hdf5|adios2 twice to get version pinning from
    # conda_build_config and build pinning from {{ mpi_prefix }}
    - if: "python_impl != 'pypy'"
      then: adios2
    # jumped by conda-forge, already at v3+
    #- catch2 >=2.13.10,<3
    - hdf5
    - if: "mpi != 'nompi' and python_impl != 'pypy'"
      then: adios2 * mpi_${{ mpi }}_*
    - if: "mpi != 'nompi'"
      then: hdf5   * mpi_${{ mpi }}_*
    - nlohmann_json
    # missing in conda-forge
    #- toml11>=3.7.1
  run:
    - if: "mpi != 'nompi'"
      then: ${{ mpi }}
    - if: "mpi != 'nompi'"
      then: mpi4py
    - python
  run_exports:
    - ${{ name }} * ${{ mpi_prefix }}_*
    - openpmd-api ${{ version }}

tests:
  - python:
      imports:
        - openpmd_api
      pip_check: false
  - script:
      - "python -c \"import openpmd_api; print(openpmd_api.__version__);\""
      - "python -c \"import openpmd_api; print(openpmd_api.variants)\""
      - if: unix
        then: test -f ${PREFIX}/lib/cmake/openPMD/openPMDConfig.cmake
      - if: linux
        then: test -f ${PREFIX}/lib/libopenPMD.so
      - if: osx
        then: otool -L ${PREFIX}/lib/libopenPMD.dylib
      - if: win
        then: if exist %LIBRARY_PREFIX%\bin\openPMD.dll (exit 0) else (exit 1)
      - if: win
        then: if exist %LIBRARY_PREFIX%\cmake\openPMDConfig.cmake (exit 0) else (exit 1)
      - if: unix
        then: test -f ${PREFIX}/share/xeus-cling/tagfiles/openpmd-api-doxygen-web.tag.xml
      - if: unix
        then: test -f ${PREFIX}/etc/xeus-cling/tags.d/openpmd-api.json
      - if: win
        then: if exist %LIBRARY_PREFIX%\share\xeus-cling\tagfiles\openpmd-api-doxygen-web.tag.xml (exit 0) else (exit 1)
      - if: win
        then: if exist %LIBRARY_PREFIX%\etc\xeus-cling\tags.d\openpmd-api.json (exit 0) else (exit 1)

about:
  license: LGPL-3.0-or-later
  license_file: COPYING.LESSER
  summary: C++ & Python API for writing & reading (.h5, .bp, .json, ...), serial & MPI parallel openPMD files.
  description: |
    This library provides a common high-level API for openPMD writing and
    reading. It provides a common interface to I/O libraries and file formats
    such as HDF5, ADIOS2, and JSON.
    Language bindings are provided for C++17 (or newer) and Python 3.
    This conda-forge package provides serial and MPI-parallel I/O. Windows
    support is limited to serial versions of HDF5, ADIOS2 and JSON.
  homepage: https://www.openPMD.org
  repository: https://github.com/openPMD/openPMD-api
  documentation: https://openpmd-api.readthedocs.io

extra:
  recipe-maintainers:
    - ax3l
    - franzpoeschel

