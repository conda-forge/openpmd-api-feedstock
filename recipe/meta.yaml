{% set name = "openpmd-api" %}
{% set version = "0.10.0a" %}
{% set build = 0 %}
{% set version_fn = version.replace("a", "-alpha") %}
{% set sha256 = "1a19bba8435bee0a6a898453752a9e2108221b0f1a7137038596a2d4b6b10661" %}

# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

# prioritize nompi variant via build number
{% if mpi == 'nompi' %}
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  fn: {{ version_fn }}.tar.gz
  url: https://github.com/openPMD/openPMD-api/archive/{{ version_fn }}.tar.gz
  sha256: {{ sha256 }}

build:
  number: {{ build }}
  skip: True  # [py27]

  # add build string so packages can depend on
  # mpi or nompi variants
  # dependencies:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  # `pkg * nompi_*` for no mpi
  {% if mpi == 'nompi' %}
  {% set mpi_prefix = "nompi" %}
  {% else %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% endif %}
  string: "{{ mpi_prefix }}_py{{ py }}h{{ PKG_HASH }}_{{ build }}"

  run_exports:
    # strict runtime dependency on build-time MPI flavor
    - {{ name }} * {{ mpi_prefix }}_* 
    # https://conda.io/docs/user-guide/tasks/build-packages/variants.html#referencing-subpackages
    # in 0.X.*, newer minor versions are compatible
    - {{ pin_subpackage('openpmd-api', min_pin='x.x', max_pin='x.x') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - make  # [unix]
    - cmake >=3.11
  host:
    - {{ mpi }}  # [mpi != 'nompi'] 
    - python
    - pybind11 >=2.3.0
    # need to list hdf5|adios twice to get version pinning from conda_build_config
    # and build pinning from {{ mpi_prefix }}
    - adios >=1.13.1                    # [unix]
    - hdf5  >=1.8.13
    - adios >=1.13.1 = mpi_{{ mpi }}_*  # [unix and mpi != 'nompi']
    - hdf5  >=1.8.13 = mpi_{{ mpi }}_*  # [mpi != 'nompi']
  run:
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py     # [mpi != 'nompi']
    - python
    - numpy >=1.15.0
    # FIXME: for some reason warnings about this (ADIOS1 deps)
    - blosc
    - zlib
    - bzip2

test:
  imports:
    - openpmd_api
  commands:
    - python -c "import openpmd_api; print(openpmd_api.__version__);"
    - python -c "import openpmd_api; print(openpmd_api.variants)"
    - test -f ${PREFIX}/lib/cmake/openPMD/openPMDConfig.cmake                     # [unix]
    - test -f ${PREFIX}/lib/libopenPMD.so                                         # [linux]
    - otool -L ${PREFIX}/lib/libopenPMD.dylib                                     # [osx]
    - if exist %LIBRARY_PREFIX%\bin\openPMD.dll (exit 0) else (exit 1)            # [win]
    - otool -L ${PREFIX}/lib/libopenPMD.ADIOS1.Serial.dylib                       # [osx and mpi != 'mpich']
    - ldd ${PREFIX}/lib/libopenPMD.ADIOS1.Serial.so                               # [linux]
    - if exist %LIBRARY_PREFIX%\cmake\openPMDConfig.cmake (exit 0) else (exit 1)  # [win]

about:
  home: https://www.openPMD.org
  license: LGPL 3
  license_family: LGPL
  license_file: COPYING.LESSER
  summary: 'C++ & Python API for writing & reading (.h5, .bp, .json, ...), serial & MPI parallel openPMD files.'

  description: |
    This library provides a common high-level API for openPMD writing and
    reading. It provides a common interface to I/O libraries and file formats
    such as HDF5, ADIOS and JSON.
    Language bindings are provided for C++11 (or newer) and Python 3.
    This conda-forge package only provides serial I/O, please build from source
    for MPI parallel I/O on HPC systems. Window support is limited to HDF5 and
    JSON.
  doc_url: https://openpmd-api.readthedocs.io
  dev_url: https://github.com/openPMD/openPMD-api

extra:
  recipe-maintainers:
    - ax3l
    - C0nsultant
